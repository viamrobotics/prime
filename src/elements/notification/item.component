<script lang='ts'>
  import { onMount, onDestroy } from 'svelte'
  import { tweened } from 'svelte/motion'
  import { linear } from 'svelte/easing'
  import { toast } from './stores'
  import { type SvelteToastOptions, defaults } from './stores'

  export let item: SvelteToastOptions
  export let reset: number

  let next = item.initial!
  let prev = next
  let paused = false
  let lastReset: number

  const progress = tweened(item.initial, { duration: item.duration ?? defaults.duration!, easing: linear });

  $: if (reset !== lastReset) {
    ;(async () => {
      await progress.set(item.initial, { duration: 100 })
      paused = true
      resume()
      lastReset = reset;
    })()
    
  }

  $: if ($progress === 0) autoclose();

  const close = () => toast.pop(item.id!)
  
  const autoclose = () => ($progress === 1 || $progress === 0) && close()
  
  const pause = () => {
    if (!paused && $progress !== next) {
      progress.set($progress, { duration: 0 })
      paused = true
    }
  }
  
  const resume = () => {
    if (paused) {
      const d = item.duration!
      const duration = d - d * (($progress - prev) / (next - prev))
      paused = false
      progress.set(next, { duration })
    }
  }
  
  $: if (next !== item.next) {
    next = item.next!
    prev = $progress
    paused = false
    progress.set(next)
  }

  const handleVisibilityChange = () => (document.hidden ? pause() : resume())

  onMount(() => {
    document.addEventListener('visibilitychange', handleVisibilityChange)
    handleVisibilityChange()
  })
  
  onDestroy(() => {
    item.onpop?.(item.id!)
    document.removeEventListener('visibilitychange', handleVisibilityChange)
  })
</script>

<v-notify
  exitable={item.dismissable ? 'true' : 'false'}
  class="relative w-[360px] mb-2 pointer-events-auto"
  class:pe={item.pausable}
  on:mouseenter={() => item.pausable && pause()}
  on:mouseleave={resume}
  variant={item.variant ?? 'info'}
  title={item.title}
  message={item.message}
  progress={$progress}
  on:close={close}
/>
{"version":3,"file":"utils-03394aa3.js","sources":["../../src/lib/sort.ts","../../src/elements/select/utils.ts"],"sourcesContent":["/* eslint-disable sonarjs/cognitive-complexity */\n/* eslint-disable unicorn/prefer-regexp-test */\n\nexport const addSpecialCharacterEscapes = (value: string) => {\n  // This function takes a value and adds backslashes for special chars\n  // so that it doesn't treat it as a special character in a\n  let newValue = '';\n\n  for (const element of value) {\n    newValue += /[^\\dA-Za-z]/.test(element) ? `\\\\${element}` : element;\n  }\n  return newValue;\n};\n\nexport const searchSort = (\n  data: string[],\n  searchTerm: string,\n  reduce: boolean\n) => {\n  const results: Record<string, string[]> = {};\n  const termCopy = addSpecialCharacterEscapes(searchTerm);\n\n  const initialCharacterMatch = new RegExp(`^${termCopy}`, 'i');\n  const anyMatch = new RegExp(termCopy, 'gi');\n\n  for (const datum of data) {\n    let index = -1;\n    const words = datum.split(' ');\n\n    // eslint-disable-next-line unicorn/no-for-loop\n    for (let i = 0; i < words.length; i++) {\n      const word = words[i]!;\n\n      if (word.match(initialCharacterMatch)) {\n        index = 0;\n        break;\n      } else if (word.match(anyMatch)) {\n        index = i + 1;\n      }\n    }\n\n    if (results[index]) {\n      results[index]!.push(datum);\n    } else {\n      results[index] = [datum];\n    }\n  }\n\n  const finalResults: string[] = [];\n\n  if (reduce) {\n    for (const key of Object.keys(results)) {\n      if (Number.parseInt(key, 10) !== -1) {\n        const sorted = results[key] || [];\n        finalResults.push(...sorted);\n      }\n    }\n  } else {\n    for (const key of Object.keys(results)) {\n      const sorted = results[key] || [];\n      finalResults.push(...sorted);\n    }\n  }\n\n  return finalResults;\n};\n","import { addSpecialCharacterEscapes } from '../../lib/sort';\n\ninterface Match {\n  search: string[];\n  option: string;\n}\n\nexport type SortOptions = 'default' | 'reduce' | 'off';\n\nexport const isElementInScrollView = (element: Element) => {\n  const { top, bottom } = element.getBoundingClientRect();\n  const parentRect =\n    element.parentElement!.parentElement!.getBoundingClientRect();\n\n  return bottom < parentRect.bottom && top > parentRect.top;\n};\n\nexport const shouldBeChecked = (value: string, option: string) => {\n  const values = value.split(',').map((v) => v.trim());\n  return values.includes(option);\n};\n\nexport const applySearchHighlight = (options: string[], value: string) => {\n  if (!value) {\n    return options.map((option) => ({ search: undefined, option }));\n  }\n\n  const matches = [];\n  const noMatches = [];\n\n  const valueCopy = addSpecialCharacterEscapes(value);\n\n  for (const option of options) {\n    const match = option.match(new RegExp(valueCopy, 'i'));\n\n    if (match?.index === undefined) {\n      noMatches.push({\n        search: undefined,\n        option,\n      });\n    } else {\n      const begin = option.slice(0, match.index);\n      const middle = option.slice(match.index, match.index + valueCopy.length);\n      const end = option.slice(match.index + valueCopy.length);\n      matches.push({\n        search: [begin, middle, end],\n        option,\n      });\n    }\n  }\n\n  sortArr(matches);\n  return [...matches, ...noMatches];\n};\n\nconst sortArr = (arr: Match[]) => {\n  arr.sort((a, b) => {\n    if (a.option.indexOf(a.search[1]!) < b.option.indexOf(b.search[1]!)) {\n      return -1;\n    }\n\n    return 1;\n  });\n};\n"],"names":["addSpecialCharacterEscapes","value","newValue","element","searchSort","data","searchTerm","reduce","results","termCopy","initialCharacterMatch","anyMatch","datum","index","words","i","word","finalResults","key","sorted","isElementInScrollView","top","bottom","parentRect","shouldBeChecked","option","v","applySearchHighlight","options","matches","noMatches","valueCopy","match","begin","middle","end","sortArr","arr","a","b"],"mappings":"AAGa,MAAAA,EAA8BC,GAAkB,CAG3D,IAAIC,EAAW,GAEf,UAAWC,KAAWF,EACpBC,GAAY,cAAc,KAAKC,CAAO,EAAI,KAAKA,IAAYA,EAEtD,OAAAD,CACT,EAEaE,EAAa,CACxBC,EACAC,EACAC,IACG,CACH,MAAMC,EAAoC,CAAA,EACpCC,EAAWT,EAA2BM,CAAU,EAEhDI,EAAwB,IAAI,OAAO,IAAID,IAAY,GAAG,EACtDE,EAAW,IAAI,OAAOF,EAAU,IAAI,EAE1C,UAAWG,KAASP,EAAM,CACxB,IAAIQ,EAAQ,GACN,MAAAC,EAAQF,EAAM,MAAM,GAAG,EAG7B,QAASG,EAAI,EAAGA,EAAID,EAAM,OAAQC,IAAK,CAC/B,MAAAC,EAAOF,EAAMC,CAAC,EAEhB,GAAAC,EAAK,MAAMN,CAAqB,EAAG,CAC7BG,EAAA,EACR,WACSG,EAAK,MAAML,CAAQ,IAC5BE,EAAQE,EAAI,GAIZP,EAAQK,CAAK,EACPL,EAAAK,CAAK,EAAG,KAAKD,CAAK,EAElBJ,EAAAK,CAAK,EAAI,CAACD,CAAK,EAI3B,MAAMK,EAAyB,CAAA,EAE/B,GAAIV,GACF,UAAWW,KAAO,OAAO,KAAKV,CAAO,EACnC,GAAI,OAAO,SAASU,EAAK,EAAE,IAAM,GAAI,CACnC,MAAMC,EAASX,EAAQU,CAAG,GAAK,CAAA,EAClBD,EAAA,KAAK,GAAGE,CAAM,OAI/B,WAAWD,KAAO,OAAO,KAAKV,CAAO,EAAG,CACtC,MAAMW,EAASX,EAAQU,CAAG,GAAK,CAAA,EAClBD,EAAA,KAAK,GAAGE,CAAM,EAIxB,OAAAF,CACT,ECxDaG,EAAyBjB,GAAqB,CACzD,KAAM,CAAE,IAAAkB,EAAK,OAAAC,CAAO,EAAInB,EAAQ,sBAAsB,EAChDoB,EACJpB,EAAQ,cAAe,cAAe,sBAAsB,EAE9D,OAAOmB,EAASC,EAAW,QAAUF,EAAME,EAAW,GACxD,EAEaC,EAAkB,CAACvB,EAAewB,IAC9BxB,EAAM,MAAM,GAAG,EAAE,IAAKyB,GAAMA,EAAE,KAAA,CAAM,EACrC,SAASD,CAAM,EAGlBE,EAAuB,CAACC,EAAmB3B,IAAkB,CACxE,GAAI,CAACA,EACI,OAAA2B,EAAQ,IAAKH,IAAY,CAAE,OAAQ,OAAW,OAAAA,CAAS,EAAA,EAGhE,MAAMI,EAAU,CAAA,EACVC,EAAY,CAAA,EAEZC,EAAY/B,EAA2BC,CAAK,EAElD,UAAWwB,KAAUG,EAAS,CAC5B,MAAMI,EAAQP,EAAO,MAAM,IAAI,OAAOM,EAAW,GAAG,CAAC,EAEjD,IAAAC,GAAA,YAAAA,EAAO,SAAU,OACnBF,EAAU,KAAK,CACb,OAAQ,OACR,OAAAL,CAAA,CACD,MACI,CACL,MAAMQ,EAAQR,EAAO,MAAM,EAAGO,EAAM,KAAK,EACnCE,EAAST,EAAO,MAAMO,EAAM,MAAOA,EAAM,MAAQD,EAAU,MAAM,EACjEI,EAAMV,EAAO,MAAMO,EAAM,MAAQD,EAAU,MAAM,EACvDF,EAAQ,KAAK,CACX,OAAQ,CAACI,EAAOC,EAAQC,CAAG,EAC3B,OAAAV,CAAA,CACD,GAIL,OAAAW,EAAQP,CAAO,EACR,CAAC,GAAGA,EAAS,GAAGC,CAAS,CAClC,EAEMM,EAAWC,GAAiB,CAC5BA,EAAA,KAAK,CAACC,EAAGC,IACPD,EAAE,OAAO,QAAQA,EAAE,OAAO,CAAC,CAAE,EAAIC,EAAE,OAAO,QAAQA,EAAE,OAAO,CAAC,CAAE,EACzD,GAGF,CACR,CACH"}
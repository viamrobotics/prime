{"version":3,"file":"code-editor-917c9ab5.js","sources":["../../src/lib/monaco/index.ts","../../src/lib/remove-newline-whitespace.ts","../../src/lib/monaco/loader.ts","../../src/elements/code-editor.svelte"],"sourcesContent":["import { version as MonacoVersion } from 'monaco-editor/package.json';\nimport type { Schema, SubSchema } from './types';\n\nexport const monacoURL = `https://cdnjs.cloudflare.com/ajax/libs/monaco-editor/${MonacoVersion}`;\n\nconst schemas: monaco.languages.json.DiagnosticsOptions['schemas'] = [];\n\n// Monaco doesn't understand our schema $ref paths, which look like:\n// #/definitions/SomeAttr\n// For now we're just transforming them into refs that monaco can understand.\nconst makeRefUri = (id: string, key: string) => {\n  return `http://definitions/${id}-${key}.json`;\n};\n\nconst keyFromRef = (ref = '') => ref.split('/').pop()!;\n\nconst updateRefs = (\n  id: string,\n  definition: SubSchema\n): Record<string, string> => {\n  for (const property of Object.values(definition.properties ?? [])) {\n    if (property.type === 'array' && property.items?.type) {\n      property.description = `\"array\" of type \"${property.items?.type}\"`;\n    } else if (property.type === 'array') {\n      property.description = '\"array\" of type \"object\"';\n    } else {\n      property.description = `\"${property.type!}\"`;\n    }\n  }\n\n  return JSON.parse(JSON.stringify(definition), (key, value: string) => {\n    if (key === '$ref') {\n      return makeRefUri(id, keyFromRef(value));\n    }\n\n    if (key === '$schema') {\n      return;\n    }\n\n    return value;\n  }) as Record<string, string>;\n};\n\nconst addSchemas = (id: string, schema: Schema, fileMatch: string[]) => {\n  const { $ref, definitions = {} } = schema;\n  for (const [key, definition] of Object.entries(definitions)) {\n    schemas.push({\n      uri: makeRefUri(id, key),\n      schema: updateRefs(id, definition),\n      // associate with our model\n      ...(keyFromRef($ref) === key ? { fileMatch } : undefined),\n    });\n  }\n  window.monaco.languages.json.jsonDefaults.setDiagnosticsOptions({\n    validate: true,\n    schemas,\n  });\n};\n\nconst getSchemaIndex = (id: string, key: string) => {\n  return schemas.findIndex(({ uri }) => uri === makeRefUri(id, key));\n};\n\nconst removeSchemas = (id: string, schema: Schema) => {\n  let didRemove = false;\n\n  const { definitions = {} } = schema;\n\n  for (const key of Object.keys(definitions)) {\n    const index = getSchemaIndex(id, key);\n    schemas.splice(index, 1);\n    didRemove = true;\n  }\n\n  if (!didRemove) {\n    return;\n  }\n\n  window.monaco.languages.json.jsonDefaults.setDiagnosticsOptions({\n    validate: true,\n    schemas,\n  });\n};\n\nexport const monacoUtils = {\n  addSchemas,\n  removeSchemas,\n};\n\nexport { version as MonacoVersion } from 'monaco-editor/package.json';\n","const NEWLINE_WHITESPACE_REGEX = /\\s+|\\r?\\n|\\r/g;\n\nexport const removeNewlineWhitespace = (value: string) =>\n  value.replaceAll(NEWLINE_WHITESPACE_REGEX, '');\n","import type { Monaco } from './types';\nimport { monacoURL } from './index';\n\ninterface Window extends globalThis.Window {\n  require: ((dependencies: string[], callback: () => void) => void) & {\n    config: (options: object) => void;\n  };\n  MonacoEnvironment: {\n    getWorkerUrl(): string;\n  };\n  monaco: typeof Monaco;\n}\n\ndeclare const window: Window;\n\ntype Callback = (monaco: typeof Monaco) => void;\n\nlet state = 'uninitialized';\n\nconst loadedCallbacks = new Set<Callback>();\n\nexport const loadMonaco = (onload: Callback) => {\n  if (state === 'loaded') {\n    return onload(window.monaco);\n  }\n\n  loadedCallbacks.add(onload);\n\n  if (state === 'loading') {\n    return;\n  }\n\n  state = 'loading';\n\n  const proxy = URL.createObjectURL(\n    new Blob(\n      [\n        `\n    self.MonacoEnvironment = {\n      baseUrl: '${monacoURL}/min/'\n    };\n    importScripts('${monacoURL}/min/vs/base/worker/workerMain.js');\n    importScripts('${monacoURL}/min/vs/language/json/jsonWorker.js');\n  `,\n      ],\n      { type: 'text/javascript' }\n    )\n  );\n\n  const handleLoad = () => {\n    window.require.config({ paths: { vs: `${monacoURL}/min/vs` } });\n    window.MonacoEnvironment = { getWorkerUrl: () => proxy };\n\n    window.require(['vs/editor/editor.main'], () => {\n      for (const callback of loadedCallbacks) {\n        callback(window.monaco);\n      }\n\n      state = 'loaded';\n    });\n  };\n\n  {\n    const script = document.createElement('script');\n    script.addEventListener('load', handleLoad);\n    script.async = true;\n    script.src = `${monacoURL}/min/vs/loader.js`;\n    document.head.append(script);\n  }\n};\n","<svelte:options immutable tag=\"v-code-editor\" />\n\n<script lang=\"ts\">\nimport { onMount, onDestroy } from 'svelte';\nimport { get_current_component } from 'svelte/internal';\n\nimport { addStyles, removeNewlineWhitespace, monacoURL } from '../lib/index';\n\nimport { dispatcher } from '../lib/dispatch';\n\nimport type {\n  MonacoSupportedLanguages,\n  MonacoSupportedThemes,\n  Monaco,\n  Schema,\n} from '../lib/monaco/types';\n\nimport { loadMonaco } from '../lib/monaco/loader';\nimport { monacoUtils } from '../lib/monaco';\nimport { htmlToBoolean } from '../lib/boolean';\nimport { hashCode } from '../lib/math';\n\nexport let value = '';\nexport let previous = '';\nexport let language: MonacoSupportedLanguages;\nexport let theme: MonacoSupportedThemes = 'vs';\nexport let readonly = 'false';\nexport let minimap = 'false';\nexport let schema = '';\nexport let variant: 'default' | 'diff' = 'default';\n\nconst dispatch = dispatcher();\n\naddStyles();\n\nlet isReadonly: boolean;\nlet hasMinimap: boolean;\nlet parsedSchema: Schema | undefined;\n\n$: parsedSchema = schema ? (JSON.parse(schema) as Schema) : undefined;\n$: isReadonly = htmlToBoolean(readonly, 'readonly');\n$: hasMinimap = htmlToBoolean(minimap, 'minimap');\n\nlet container: HTMLDivElement;\nlet diffEditor: Monaco.editor.IStandaloneDiffEditor;\nlet editor: Monaco.editor.IStandaloneCodeEditor;\nlet resizeObserver: ResizeObserver;\n\nconst link = document.createElement('link');\nlink.rel = 'stylesheet';\nlink.href = `${monacoURL}/min/vs/editor/editor.main.min.css`;\n\nconst component = get_current_component() as HTMLElement & {\n  shadowRoot: ShadowRoot;\n};\ncomponent.shadowRoot.append(link);\n\nconst setModel = () => {\n  if (!editor) {\n    return;\n  }\n\n  const lastModel = editor.getModel();\n  lastModel?.dispose();\n\n  let model: Monaco.editor.ITextModel;\n\n  if (parsedSchema) {\n    const id = String(hashCode(schema));\n    const uri = `http://${id}.json/`;\n    const modelUri = window.monaco.Uri.parse(uri);\n    monacoUtils.removeSchemas(id, parsedSchema);\n    monacoUtils.addSchemas(id, parsedSchema, [modelUri.toString()]);\n    model = window.monaco.editor.createModel(value, language, modelUri);\n  } else {\n    model = window.monaco.editor.createModel(value, language);\n  }\n\n  dispatch('update-model', { model });\n  editor.setModel(model);\n};\n\nconst setDiffModel = () => {\n  const lastModel = diffEditor?.getModel();\n  lastModel?.modified.dispose();\n  lastModel?.original.dispose();\n\n  diffEditor.setModel({\n    original: window.monaco.editor.createModel(previous, 'json'),\n    modified: window.monaco.editor.createModel(value, 'json'),\n  });\n};\n\nconst handleInput = (event: Event) => {\n  if (event instanceof InputEvent) {\n    event.preventDefault();\n    event.stopImmediatePropagation();\n  }\n};\n\nconst opts = () => {\n  return {\n    value,\n    language,\n    theme,\n    readOnly: isReadonly,\n    minimap: {\n      enabled: hasMinimap,\n    },\n    scrollbar: {\n      verticalScrollbarSize: 3,\n      horizontalScrollbarSize: 3,\n      vertical: 'auto',\n      horizontal: 'auto',\n      alwaysConsumeMouseWheel: false,\n    },\n    scrollBeyondLastLine: false,\n  } as const;\n};\n\nconst initDiff = () => {\n  // @TODO Why are these types incompatible?\n  diffEditor = window.monaco.editor.createDiffEditor(container, {\n    ...opts(),\n    readOnly: true,\n  }) as unknown as Monaco.editor.IStandaloneDiffEditor;\n  diffEditor.setModel({\n    original: window.monaco.editor.createModel(previous, language),\n    modified: window.monaco.editor.createModel(value, language),\n  });\n};\n\nconst init = (monaco: typeof Monaco) => {\n  if (variant === 'diff') {\n    return initDiff();\n  }\n\n  editor = monaco.editor.create(container, opts());\n\n  editor.onDidChangeModelContent(() => {\n    dispatch('input', { value: editor?.getValue() });\n  });\n\n  editor.onDidBlurEditorWidget(() => {\n    dispatch('blur', { value: editor?.getValue() });\n    emitMarkers();\n  });\n\n  editor.layout();\n  setModel();\n  emitMarkers();\n};\n\nconst emitMarkers = () => {\n  const markers = window.monaco.editor.getModelMarkers({});\n  const id = hashCode(schema);\n  const ownedMarkers = markers.filter((marker) => {\n    return marker.resource.authority === `${id}.json`;\n  });\n\n  dispatch('markers', { markers: ownedMarkers });\n};\n\nconst handleResize = () => {\n  if (!resizeObserver && editor) {\n    resizeObserver = new ResizeObserver(() => {\n      editor?.layout();\n    });\n  }\n\n  if (resizeObserver) {\n    const element: Element = editor?.getDomNode() ?? container;\n    resizeObserver.observe(element);\n  }\n};\n\nonMount(() => {\n  loadMonaco(init);\n});\n\nonDestroy(() => {\n  const model = editor?.getModel();\n  model?.dispose();\n\n  diffEditor?.dispose();\n  editor?.dispose();\n\n  resizeObserver.disconnect();\n\n  dispatch('destroy');\n});\n\n$: {\n  if (diffEditor) {\n    setDiffModel();\n    handleResize();\n  } else if (editor) {\n    setModel();\n\n    const currentValue: string = editor?.getValue() ?? '';\n\n    if (value !== undefined) {\n      const originalFormatted = removeNewlineWhitespace(value);\n      const updatedFormatted = removeNewlineWhitespace(currentValue);\n\n      if (updatedFormatted !== originalFormatted) {\n        editor?.setValue(value);\n        editor?.layout();\n      }\n    }\n\n    handleResize();\n  }\n}\n</script>\n\n<div\n  class=\"w-full h-full relative isolate\"\n  bind:this={container}\n  on:input={handleInput}\n/>\n\n<style>\n:host {\n  display: contents !important;\n}\n</style>\n"],"names":["monacoURL","MonacoVersion","schemas","makeRefUri","id","key","keyFromRef","ref","updateRefs","definition","property","_a","_b","value","addSchemas","schema","fileMatch","$ref","definitions","getSchemaIndex","uri","removeSchemas","didRemove","index","monacoUtils","NEWLINE_WHITESPACE_REGEX","removeNewlineWhitespace","state","loadedCallbacks","loadMonaco","onload","proxy","handleLoad","callback","script","insert","target","div","anchor","ctx","$$props","previous","language","theme","readonly","minimap","variant","dispatch","dispatcher","addStyles","isReadonly","hasMinimap","parsedSchema","container","diffEditor","editor","resizeObserver","link","get_current_component","setModel","lastModel","model","hashCode","modelUri","setDiffModel","handleInput","event","opts","initDiff","$$invalidate","init","monaco","emitMarkers","markers","ownedMarkers","marker","handleResize","element","onMount","onDestroy","$$value","htmlToBoolean","currentValue","originalFormatted"],"mappings":"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"}
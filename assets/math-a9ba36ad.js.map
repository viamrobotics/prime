{"version":3,"file":"math-a9ba36ad.js","sources":["../../src/lib/math.ts"],"sourcesContent":["export const clamp = (val: number, minVal: number, maxVal: number): number => {\n  return val <= minVal ? minVal : val >= maxVal ? maxVal : val;\n};\n\n/**\n * take in a value, and then calculate that value's percentage\n * of the overall range (min-max)\n **/\nexport const percentOf = (\n  val: number,\n  min: number,\n  max: number,\n  precision: number\n): number => {\n  const perc = ((val - min) / (max - min)) * 100;\n  if (Number.isNaN(perc) || perc <= 0) {\n    return 0;\n  } else if (perc >= 100) {\n    return 100;\n  } else {\n    return Number.parseFloat(perc.toFixed(precision));\n  }\n};\n\nexport const hashCode = (str: string) => {\n  let hash = 0;\n  let chr = 0;\n\n  if (str.length === 0) {\n    return hash;\n  }\n\n  for (let index = 0; index < str.length; index += 1) {\n    chr = str.codePointAt(index)!;\n    // eslint-disable-next-line no-bitwise\n    hash = (hash << 5) - hash + chr;\n    hash = Math.trunc(hash); // Convert to 32bit integer\n  }\n\n  return hash;\n};\n"],"names":["clamp","val","minVal","maxVal","percentOf","min","max","precision","perc","hashCode","str","hash","chr","index"],"mappings":"AAAO,MAAMA,EAAQ,CAACC,EAAaC,EAAgBC,IAC1CF,GAAOC,EAASA,EAASD,GAAOE,EAASA,EAASF,EAO9CG,EAAY,CACvBH,EACAI,EACAC,EACAC,IACW,CACX,MAAMC,GAASP,EAAMI,IAAQC,EAAMD,GAAQ,IAC3C,OAAI,OAAO,MAAMG,CAAI,GAAKA,GAAQ,EACzB,EACEA,GAAQ,IACV,IAEA,OAAO,WAAWA,EAAK,QAAQD,CAAS,CAAC,CAEpD,EAEaE,EAAYC,GAAgB,CACvC,IAAIC,EAAO,EACPC,EAAM,EAEN,GAAAF,EAAI,SAAW,EACV,OAAAC,EAGT,QAASE,EAAQ,EAAGA,EAAQH,EAAI,OAAQG,GAAS,EACzCD,EAAAF,EAAI,YAAYG,CAAK,EAEnBF,GAAAA,GAAQ,GAAKA,EAAOC,EACrBD,EAAA,KAAK,MAAMA,CAAI,EAGjB,OAAAA,CACT"}
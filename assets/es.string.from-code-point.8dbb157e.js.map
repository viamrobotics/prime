{"version":3,"file":"es.string.from-code-point.8dbb157e.js","sources":["../../node_modules/core-js/modules/es.string.from-code-point.js"],"sourcesContent":["var $ = require('../internals/export');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar toAbsoluteIndex = require('../internals/to-absolute-index');\n\nvar $RangeError = RangeError;\nvar fromCharCode = String.fromCharCode;\n// eslint-disable-next-line es-x/no-string-fromcodepoint -- required for testing\nvar $fromCodePoint = String.fromCodePoint;\nvar join = uncurryThis([].join);\n\n// length should be 1, old FF problem\nvar INCORRECT_LENGTH = !!$fromCodePoint && $fromCodePoint.length != 1;\n\n// `String.fromCodePoint` method\n// https://tc39.es/ecma262/#sec-string.fromcodepoint\n$({ target: 'String', stat: true, arity: 1, forced: INCORRECT_LENGTH }, {\n  // eslint-disable-next-line no-unused-vars -- required for `.length`\n  fromCodePoint: function fromCodePoint(x) {\n    var elements = [];\n    var length = arguments.length;\n    var i = 0;\n    var code;\n    while (length > i) {\n      code = +arguments[i++];\n      if (toAbsoluteIndex(code, 0x10FFFF) !== code) throw $RangeError(code + ' is not a valid code point');\n      elements[i] = code < 0x10000\n        ? fromCharCode(code)\n        : fromCharCode(((code -= 0x10000) >> 10) + 0xD800, code % 0x400 + 0xDC00);\n    } return join(elements, '');\n  }\n});\n"],"names":["require$$0","require$$1","require$$2"],"mappings":"uDAAA,GAAI,GAAIA,EACJ,EAAcC,EACd,EAAkBC,EAElB,EAAc,WACd,EAAe,OAAO,aAEtB,EAAiB,OAAO,cACxB,EAAO,EAAY,GAAG,IAAI,EAG1B,EAAmB,CAAC,CAAC,GAAkB,EAAe,QAAU,EAIpE,EAAE,CAAE,OAAQ,SAAU,KAAM,GAAM,MAAO,EAAG,OAAQ,GAAoB,CAEtE,cAAe,SAAuB,EAAG,CAKvC,OAJI,GAAW,CAAA,EACX,EAAS,UAAU,OACnB,EAAI,EACJ,EACG,EAAS,GAAG,CAEjB,GADA,EAAO,CAAC,UAAU,KACd,EAAgB,EAAM,OAAQ,IAAM,EAAM,KAAM,GAAY,EAAO,4BAA4B,EACnG,EAAS,GAAK,EAAO,MACjB,EAAa,CAAI,EACjB,EAAe,KAAQ,QAAY,IAAM,MAAQ,EAAO,KAAQ,KAAM,CAC3E,CAAC,MAAO,GAAK,EAAU,EAAE,CAC3B,CACH,CAAC"}